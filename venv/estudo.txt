

VERBOS HTTP
Quando clicamos em um link, estamos chamando o método GET do HTTP
Quando enviamos um formulário, chamados o método POST

GET = Ler
POST = Inserir, Criar, Postar
PUT = Alterar
DELETE = Remover
--------------------------------

Quando consultmos um site de conversão de moedas, estamos realizando um GET.

Porém essa mesma consulta no Web Service, retorna um JSON ou XML

--------------------------------

URI -> São os endereços Web.

URI com recurso unico é chamado Instância (Instance).

Vários recursos chama-se Coleção (Collection).

/postagens -> Coleção
/postagens/{ID} -> Instância

QUERY PARAMETER
Para coleções de recursos, contamos com Parametros de Consulta (Query Parameter).

PAGINAÇÃO
Retornar tudo pode ficar inviavel, tornando necessário utilizar parametros de consulta, como paginação

Na paginação, podemos determinar quantos elementos queremos exibir por pagina, através dos parametros de consulta: LIMIT e OFFSET

LIMIT -> Não mais do que a quantidade limite de elementos que serão exibidas

OFFSET -> Quantidade de elementos que serão pulados, de forma que só aparecerão resultados posteriores ao valor de offset.

/postagens?limit=10&offset=30
- ? aceita parametros/Query
- & combinar parametros
- limit=10 no maximo 10 elementos
- offset=30 vamos pular as 30 primeiras linhas, vamos receber da linha 31 ao 40

LIMIT e OFFSET são parametros padrões em qualquer aplicação. Porém, podemos criar nossos próprios parametros para realizar outros tipos de filtros.

/postagens?ano=2018

/postagens?ano=2018&limit=10&offset=30

COLEÇÃO
- Idealmente deve conter os nomes no SUBSTANTIVO e PLURAL
Ex: /postagens, /comentarios, /curtidas

Nunca use verbos no infinitivo: /postar, /comentar, /curtir 

----------

STATUS CODE (CODIGO DE STATUS)
- São códigos que são enviados juntamente com a resposta de uma requisição HTTP. 
- Esses códigos ajudam o cliente saber se a requisição foi bem sucedida. 
- E não se foi, ajuda-o entender qual foi a causa provável do erro.
200 -> Sucesso
404 -> Not found
500 -> Server error

----------

FORMATO DOS DADOS
- O criador do REST API é quem decide em que formatos ele exibirá os dados como resposta.
- Os formatos mais comuns são JSON e XML

COMO O SERVIDOR IDENTIFICA O TIPO DE DADOS
Através do parametro HEADER(ou cabeçalho), chamado CONTENT-TYPE(Tipo de conteudo)

Junto com a requisição para acessar um Recurso, envia-se um CABEÇALHO contendo as informações necessárias.

Essas informações necessárias, são chamadas de METADATA (ou metadados em português).

CONTENT-TYPE -> é um tipo de Metadata ou Metadados, que indica qual o formato que se espera do servidor. Existem alguns padrões predefinidos de valores do Content-Type.

Para receber dados em XML, usa-se text/xml. 
Para receber dados em JSON, usa-se application/json.

Content-type  
Header

application/json
Value

----------

AUTENTICAÇÃO REST

Para entender como funciona a autenticação de usuários em REST API, vamos dar uma olhada em como funciona a autenticação clássica de uma aplicação web.

Apesar de ser relativamente simples. É um problema quando se trata de REST APIs, porque REST APIs são stateless.

REST APIs são Stateless (ou sem estado)

E se é assim que funciona, não é possível fazer autenticações baseadas em "sessions", pois o servidor não guardará essa informação.

O mecanismo de autenticação mais básico é um chamado BASIC AUTH (Basic Access Authentication)

Então não existe nenhum "estado" sendo mantido no servidor, pois toda vez que o cliente precisa fazer uma requisição ao servidor, envia o usuário e senha.

O cliente acaba se autenticando a cada requisição. Dai o nome Basic Auth, é a forma mais básica de autenticação possível ...

BASIC AUTH
- Envia usuário e senha, porém criptografado 
- Criptografado com a codificação Base64

- No HEADER, em Autorization 
- Insere a palavra Basic senha_codificada

- O servidor verifica a primeira palavra chamada "Basic"
- Então sabe que é Basic Auth.
- Logo sabe que a String do lado foi codificada com Base64, 
- e então, faz a DECODIFICAÇÃO Base64, e pega o usuário e a senha

CODIFICAÇÃO não é CRIPTOGRAFIA.
- Logo, qualquer um que tenha acesso a essa String codificada, pode decodifica-la com Base64. 
- Por isso NÃO É SEGURO.

Vantagens
- Simples
- Servidor Stateless
- Suportados por todos os browsers

Desvantagens
- Https apenas
- Sujeito a ataques
- Deslogar é complicado

Melhores Soluções
- Digest Access Authentication
- Asymmetric Cryptography
- OAuth
- Json Web Token
